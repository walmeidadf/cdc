############################# Server Basics #############################

# The role of this server. Setting this puts us in KRaft mode
KAFKA_PROCESS_ROLES=broker,controller

# The node id associated with this instance's roles
KAFKA_NODE_ID=1

# The connect string for the controller quorum
KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093

############################# Socket Server Settings #############################

# The address the socket server listens on.
# Combined nodes (i.e. those with `process.roles=broker,controller`) must list the controller listener here at a minimum.
# If the broker listener is not defined, the default listener will use a host name that is equal to the value of java.net.InetAddress.getCanonicalHostName(),
KAFKA_LISTENERS=PLAINTEXT://kafka-1:9092,CONTROLLER://kafka-1:9093

# Name of listener used for communication between brokers.
KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT

# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092

# A comma-separated list of the names of the listeners used by the controller.
# If no explicit mapping set in `listener.security.protocol.map`, default will be using PLAINTEXT protocol
# This is required if running in KRaft mode.
KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# In development environ, we do not need to many threads
# The number of threads that the server uses for receiving requests from the network and sending responses to the network
KAFKA_NUM_NETWORK_THREADS=3

# The number of threads that the server uses for processing requests, which may include disk I/O
KAFKA_NUM_IO_THREADS=8

# The send buffer (SO_SNDBUF) used by the socket server
KAFKA_SOCKET_SEND_BUFFER_BYTES=102400

# The receive buffer (SO_RCVBUF) used by the socket server
KAFKA_SOCKET_RECEIVE_BUFFER_BYTES=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
KAFKA_SOCKET_REQUEST_MAX_BYTES=104857600

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
KAFKA_LOG_DIRS=/var/log/kafka

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
KAFKA_NUM_PARTITIONS=3

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
KAFKA_DEFAULT_REPLICATION_FACTOR=1

KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# Configure default log cleanup. You can override these on per-topic basis
KAFKA_LOG_CLEANUP_POLICY=compact

# The minimum age of a log file to be eligible for deletion due to age
KAFKA_LOG_RETENTION_HOURS=-1

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824
KAFKA_LOG_RETENTION_BYTES=-1


# The maximum size of a log segment file. When this size is reached a new log segment will be created.
KAFKA_LOG_SEGMENT_BYTES=1048576

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS=300000

KAFKA_LOG_ROLL_HOURS=24
KAFKA_LOG_SEGMENT_DELETE_DELAY_MS=60000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0

############################# Confluent Authorizer Settings  #############################

# Replication factor for the topic used for licensing. Default is 3.
KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR=1

# Replication factor for the metadata topic used for authorization. Default is 3.
KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR=1

# Replication factor for the topic used for audit logs. Default is 3.
KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS=1

############################# Confluent Data Balancer Settings  #############################

# The Confluent Data Balancer is used to measure the load across the Kafka cluster and move data
# around as necessary. Comment out this line to disable the Data Balancer.
KAFKA_CONFLUENT_BALANCER_ENABLE=false

# The replication factor for the topics the Data Balancer uses to store internal state.
# For anything other than development testing, a value greater than 1 is recommended to ensure availability.
# The default value is 3.
KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR=1

################################## Confluent Telemetry Settings  ##################################

# The Confluent Telemetry Reporter is a plugin that runs inside each Confluent Platform service to push metadata about the service to Confluent.
# If Self-Balancing is enabled on the cluster, Telemetry Reporter is enabled and runs by default as a requirement of Self-Balancing Clusters.
# If Self-Balancing is not enabled on the cluster, the Telemetry Reporter can be fully disabled
KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE=FALSE

################################## Cluster Linking Settings  ##################################

# Cluster Linking enables you to directly connect clusters and mirror topics from one cluster to another.
# Cluster Linking makes it easy to build multi-datacenter, multi-region, and hybrid cloud deployments
# In development enviroment, we don't need this
KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE=false

############################# Miscellaneous Settings  #############################

# In development enviroment, auto-creating topics (and deleting them) could be convenient
KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
KAFKA_DELETE_TOPIC_ENABLE=true



